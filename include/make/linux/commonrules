# -*- Makefile -*-
#
# MIT License
#
# Copyright (C) 2000-2022  Wizzer Works
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
#  For information concerning this Makefile, contact Mark S. Millard,
#  of Wizzer Works at msm@wizzerworks.com.
#
################################################################################
#
# commonrules - Common build rules.
#
# Makefiles must include commondefs and include $(COMMONRULES) AFTER the
# first target is defined. See the commondefs file for detailed information.
#
################################################################################

ifdef SUBDIRS
THISPREF = this_
endif
ifdef VERSIONS
THISPREF = this_
endif
ifdef NEED_THISPREF
THISPREF = this_
endif

#
# Define the common targets as never resolved
#
ifdef THISPREF
.PHONY: $(COMMONTARGS) $(PREFTARGS) $(SUBDIRS) $(VERSIONS) all
else
.PHONY: $(COMMONTARGS) $(SUBDIRS) $(VERSIONS) all
endif

#
# If a Makefile that cascades down to subdirectories or versions
# also needs to build in the current directory, it must define
# NEED_THISPREF and create the standard targets of the form
# $(THISPREF)<target>.
#
ifdef NEED_THISPREF
all: $(THISPREF)all
clobber: $(THISPREF)clobber
depends: $(THISPREF)depends
clean: $(THISPREF)clean
rmtargets: $(THISPREF)rmtargets
ideclobber: $(THISPREF)ideclobber
endif

#
# Never blow away subdirs if stop make
#
ifdef SUBDIRS
.PRECIOUS: $(SUBDIRS)
endif

ifdef VERSIONS
.PRECIOUS: $(VERSIONS)
endif

#
# If SUBDIRS or VERSIONS is defined, each subdirectory should be a pseudotarget
#
ifdef SUBDIRS
$(SUBDIRS):
	$(SUBDIR_MAKERULE)
endif

ifdef VERSIONS
$(VERSIONS):
	$(VERSION_MAKERULE)
endif

#
# Common build targets
#
$(THISPREF)clobber: $(THISPREF)clean $(THISPREF)rmtargets

$(THISPREF)clean:
ifneq ($(strip $(DIRT)),)
	$(RM) -r $(DIRT)
endif

$(THISPREF)rmtargets:
ifneq ($(strip $(TDIRT)),)
	$(RM) -r $(TDIRT)
endif
ifneq ($(strip $(TARGETS)),)
	$(RM) -r $(TARGETS)
endif

$(THISPREF)rebuild: $(THISPREF)clobber $(THISPREF)all

#don't build anything here by default.
$(THISPREF)prebuild:

#
# IDE clobber target
#
$(THISPREF)ideclobber:
ifneq ($(strip $(IDEDIRT)),)
ifdef LEAF_DEPTH
	$(RM) $(foreach idef,$(IDEDIRT),$(LEAF_DEPTH)/$(idef))
else
	$(RM) $(IDEDIRT)
endif
endif

# dependency rebuilding targets...

$(THISPREF)cdepends : $(CFILES)
ifneq ($(strip $(CFILES)),)
	@echo "Rebuilding C file dependencies..."
	@FILENAME_EXCEPTIONS='($(FILENAME_EXCEPTIONS))' \
	$(SHELL) -ec 'for file in $?; do \
		export nametmp=$${file%.[Cc]}.dep; \
		$(MAKEDEPEND) $(CINCS) $(CDEFS) $$file > $${nametmp##*[/\]}; \
		done'
endif

$(THISPREF)cxxdepends: $(CXXFILES)
ifneq ($(strip $(CXXFILES)),)
	@echo "Rebuilding CXX file dependencies..."
	@FILENAME_EXCEPTIONS='($(FILENAME_EXCEPTIONS))' \
	$(SHELL) -ec 'for file in $?; do \
		export nametmp=$${file%.[Cc][PXpx][PXpx]}.dep; \
		$(MAKEDEPEND) $(CXXINCS) $(CXXDEFS) $$file > $${nametmp##*[/\]}; \
		done'
endif

# for convenience
$(THISPREF)depend: $(THISPREF)depends

$(THISPREF)depends: $(THISPREF)cdepends $(THISPREF)cxxdepends

#
# Manual precompiled header targets. If manual precompilation is
# desired, these targets take care of the dirty work.
#
# PCH_MANUAL_TARGET specifies the name for the precompiled header
# file. PCH_MANUAL_BASENAME is the basename of the header and cxx
# file that indicate where the precompilation is to take place.
# If the pch object file does not end in cxx, override the value
# of PCH_MANUAL_SUFFIX.
#
ifdef PCH_MANUAL_TARGET
PCH_OPTS = -Fp"$(PCH_MANUAL_TARGET)" -Yu"$(PCH_MANUAL_BASENAME).h"
ifndef PCH_MANUAL_SUFFIX
PCH_MANUAL_SUFFIX = cxx
endif

$(filter-out $(PCH_MANUAL_BASENAME).o,$(OBJECTS)): $(PCH_MANUAL_TARGET)

$(PCH_MANUAL_TARGET): $(PCH_MANUAL_BASENAME).o

$(PCH_MANUAL_BASENAME).o: $(PCH_MANUAL_BASENAME).$(PCH_MANUAL_SUFFIX)
	@$(SHELL) -ec '$(MAKEDEPEND) $(CXXINCS) $(CXXDEFS) $< > $(PCH_MANUAL_BASENAME).dep'
	$(CXX) -Yc"$(PCH_MANUAL_BASENAME).h" -c $(CXXFLAGS) `pwd`/$<
endif

#
# Include the generated dependencies file
#
-include $(DEPENDS)
